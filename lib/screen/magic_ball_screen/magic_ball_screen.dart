import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shake/shake.dart';
import 'package:surf_practice_magic_ball/screen/magic_ball_screen/bloc/magic_ball_bloc.dart';
import 'package:surf_practice_magic_ball/screen/magic_ball_screen/widgets/magic_ball_widget.dart';

import 'widgets/magic_ball_message.dart';

class MagicBallScreen extends StatefulWidget {
  const MagicBallScreen({Key? key}) : super(key: key);

  @override
  State<MagicBallScreen> createState() => _MagicBallScreenState();
}

class _MagicBallScreenState extends State<MagicBallScreen> {
  final magicBallBloc = MagicBallBloc();
  late ShakeDetector detector;

  @override
  void initState() {
    // ! –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ShakeDetector –∏ ... "—Ç—Ä—è—Å–∏ —Ç—Ä—è—Å–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω"
    detector = ShakeDetector.autoStart(
      onPhoneShake: () {
        magicBallBloc.add(LoadMagicBallMessage());
      },
      minimumShakeCount: 1,
      shakeSlopTimeMS: 500,
      shakeCountResetTime: 3000,
      shakeThresholdGravity: 2.7,
    );
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        width: double.infinity,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color.fromRGBO(16, 12, 43, 1),
              Colors.black,
            ],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 40.0),
          child: BlocBuilder(
            bloc: magicBallBloc,
            builder: (context, state) {
              // ! –ï—Å–ª–∏ c–æ—Å—Ç–æ—è–Ω–∏–µ MagicBallMessageLoaded, –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ
              if (state is MagicBallMessageLoaded) {
                return MagicBallWidget(
                  magicBallItems: [
                    Image.asset('assets/images/ball.png', fit: BoxFit.contain),
                    MagicBallMessage(msg: state.reading, isError: false),
                  ],
                  magicBallBloc: magicBallBloc,
                  error: false,
                );
              }
              // ! –ï—Å–ª–∏ c–æ—Å—Ç–æ—è–Ω–∏–µ MagicBallMessageLoadingFailure, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π —à–∞—Ä
              if (state is MagicBallMessageLoadingFailure) {
                return MagicBallWidget(
                  magicBallItems: [
                    ..._magicBallImageList(errorImage: true),
                    MagicBallMessage(
                        msg: state.exception.toString(), isError: true),
                  ],
                  magicBallBloc: magicBallBloc,
                  error: true,
                );
              }
              // ! –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞—Ä —Å–æ —Å–≤–µ–∑–¥–∞–º–∏ ‚ú® –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∂–º–∞—Ç—å
              return MagicBallWidget(
                magicBallBloc: magicBallBloc,
                magicBallItems: _magicBallImageList(errorImage: false),
                error: false,
              );
            },
          ),
        ),
      ),
    );
  }

  // –¢–∞–∫–æ–µ ... –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∫–æ–Ω—á–∞–ª–æ—Å—å üòì
  List<Widget> _magicBallImageList({required bool errorImage}) {
    return [
      Image.asset('assets/images/${errorImage ? 'eball.png' : 'ball.png'}',
          fit: BoxFit.contain),
      Image.asset('assets/images/star.png', fit: BoxFit.contain),
      Image.asset('assets/images/small.png', fit: BoxFit.contain),
    ];
  }
}
